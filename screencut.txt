import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load Video
video_path = "D:\\Assignments\\image and vdo\\LAB\\LAB 4\\sample_video_Lab4.mp4"
cap = cv2.VideoCapture(video_path)

if not cap.isOpened():
    print("Error opening video file")
else:
    print("Video loaded successfully")

# Frame Extraction
frames = []
while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break
    frames.append(frame)

cap.release()
print(f"Total Frames Extracted: {len(frames)}")

# Function to perform color thresholding for segmentation
def color_thresholding(frame):
    hsv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    lower_bound = np.array([0, 0, 200])  # White color in HSV
    upper_bound = np.array([180, 25, 255])
    
    mask = cv2.inRange(hsv_frame, lower_bound, upper_bound)
    segmented_frame = cv2.bitwise_and(frame, frame, mask=mask)
    return segmented_frame, mask

# Soft Cuts Detection Using Histogram Differences
def detect_soft_cuts(frames, threshold=0.5):
    soft_cuts = []
    
    for i in range(1, len(frames)):
        hist_prev = cv2.calcHist([cv2.cvtColor(frames[i - 1], cv2.COLOR_BGR2HSV)], [0], None, [256], [0, 256])
        hist_curr = cv2.calcHist([cv2.cvtColor(frames[i], cv2.COLOR_BGR2HSV)], [0], None, [256], [0, 256])
        
        # Normalize the histograms
        cv2.normalize(hist_prev, hist_prev, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX)
        cv2.normalize(hist_curr, hist_curr, alpha=0, beta=1, norm_type=cv2.NORM_MINMAX)
        
        # Calculate histogram correlation
        hist_diff = cv2.compareHist(hist_prev, hist_curr, cv2.HISTCMP_CORREL)
        if hist_diff < threshold:
            soft_cuts.append(i)
    
    return soft_cuts

# Detect Soft Cuts
soft_cuts = detect_soft_cuts(frames)

# Display results
print(f"Detected Soft Cuts at frames: {soft_cuts}")

# Display frames where scene cuts are identified and show segmentation results
def display_scene_cut_results(frames, cuts):
    for cut in cuts:
        original_frame = frames[cut]
        segmented_frame, _ = color_thresholding(original_frame)
        
        plt.figure(figsize=(12, 6))
        
        # Original frame with scene cut highlighted
        plt.subplot(1, 2, 1)
        plt.imshow(cv2.cvtColor(original_frame, cv2.COLOR_BGR2RGB))
        plt.title(f'Original Frame {cut} - Soft Cut')
        plt.axis('off')
        
        # Segmented frame
        plt.subplot(1, 2, 2)
        plt.imshow(cv2.cvtColor(segmented_frame, cv2.COLOR_BGR2RGB))
        plt.title(f'Segmentation at Frame {cut}')
        plt.axis('off')
        
        plt.show()

# Display the frames and segmentation results for detected soft cuts
display_scene_cut_results(frames, soft_cuts)
